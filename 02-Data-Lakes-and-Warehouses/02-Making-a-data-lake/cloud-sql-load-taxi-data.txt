# 1.
# Prep environment

export PROJECT_ID=$(gcloud info --format='value(config.project)')
export BUCKET=${PROJECT_ID}-ml

# 2.
# Create Cloud SQL Instance
gcloud sql instances create taxi \
    --tier=db-n1-standard-1 --activation-policy=ALWAYS

# Set root password for Cloud SQL instance
gcloud sql users set-password root --host % --instance taxi \
 --password Passw0rd

# Create environment variable with IP address of cloud shell
export ADDRESS=$(wget -qO - http://ipecho.net/plain)/32

# Whitelist Cloud Shell instance for management access to SQL instance
gcloud sql instances patch taxi --authorized-networks $ADDRESS

# Get IP address of Cloud SQL instance by running
MYSQLIP=$(gcloud sql instances describe \
taxi --format="value(ipAddresses.ipAddress)")

# Check variable MYSQLIP
echo $MYSQLIP

# Create taxi table by logging into mysql command line interface
mysql --host=$MYSQLIP --user=root \
      --password --verbose

# Create schema for the table
create database if not exists bts;
use bts;
drop table if exists trips;
create table trips (
  vendor_id VARCHAR(16),
  pickup_datetime DATETIME,
  dropoff_datetime DATETIME,
  passenger_count INT,
  trip_distance FLOAT,
  rate_code VARCHAR(16),
  store_and_fwd_flag VARCHAR(16),
  payment_type VARCHAR(16),
  fare_amount FLOAT,
  extra FLOAT,
  mta_tax FLOAT,
  tip_amount FLOAT,
  tolls_amount FLOAT,
  imp_surcharge FLOAT,
  total_amount FLOAT,
  pickup_location_id VARCHAR(16),
  dropoff_location_id VARCHAR(16)
);

# Check the imports
describe trips;

# Query the trips table
select distinct(pickup_location_id) from trips;

# Exit mysql interactive console
exit

# 3. add data to Cloud SQL instance
# Download csv's
gsutil cp gs://cloud-training/OCBL013/nyc_tlc_yellow_trips_2018_subset_1.csv trips.csv-1
gsutil cp gs://cloud-training/OCBL013/nyc_tlc_yellow_trips_2018_subset_2.csv trips.csv-2

# Connect to mysql interactive console to load local infile data
mysql --host=$MYSQLIP --user=root  --password  --local-infile

# In the mysql CLI select the database
use bts;

# Load local csv file data using local-infile
LOAD DATA LOCAL INFILE 'trips.csv-1' INTO TABLE trips
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(vendor_id,pickup_datetime,dropoff_datetime,passenger_count,trip_distance,rate_code,store_and_fwd_flag,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,imp_surcharge,total_amount,pickup_location_id,dropoff_location_id);

LOAD DATA LOCAL INFILE 'trips.csv-2' INTO TABLE trips
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(vendor_id,pickup_datetime,dropoff_datetime,passenger_count,trip_distance,rate_code,store_and_fwd_flag,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,imp_surcharge,total_amount,pickup_location_id,dropoff_location_id);

# 4. checking data integrity
# Query trips for unique pickup location regions
select distinct(pickup_location_id) from trips;

# Explore further into trips table
select
  max(trip_distance),
  min(trip_distance)
from
  trips;

# How many trips have a distance of zero?
select count(*) from trips where trip_distance = 0;

# Investigate negative fare amounts
select count(*) from trips where fare_amount < 0;

# Investigate payment type
select
  payment_type,
  count(*)
from
  trips
group by
  payment_type;

# Exit
exit
